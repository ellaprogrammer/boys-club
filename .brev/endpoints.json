[{"archived": false, "code": "\nimport variables\nimport shared\nimport sms\n\ndef get(greeting):\n  return { f\"{greeting} success!\" }\n\nfrom typing import Optional\nfrom pydantic import BaseModel\nfrom global_storage import storage_context\n\n# type definition of incoming JSON body\nclass Sport(BaseModel):\n  sport1: str\n  team1: str\n  live: str\n  summary: str\n  culture: str\n\nclass User(BaseModel):\n  \"\"\"\n  Description\n  \"\"\"\n  name: str\n  phone: str\n  # email: Optional[str]\n  # sport: Optional[Sport] \n  class Config:\n    title = 'Main'\n\n# pass it in to function\nfrom fastapi.responses import JSONResponse\nfrom twilio.rest import Client\n\ndef post(user: User, user_store = storage_context(\"users\")):\n  user_store[user.phone] = user.dict()\n  client = Client(variables.ACCOUNT_SID, variables.TWILIO_AUTH_TOKEN)\n  message = client.messages \\\n    .create(\n        body=\"welcome to the boysclub\",\n        from_='+',\n        to=user.phone\n    )\n\n  print(message.sid)\n  # sms.send(user.phone, \"Welcome to the boysclub.\")\n  # return {\n  #   \"status\": f\"{user.name} says hi!\"\n  # }\n  return JSONResponse(status_code=201, content={\"status\": f\"{user.name} success.\"})\n\n\n", "create_date": "2020-12-30T18:15:53.955194+00:00", "id": "ep-b1d1a600-b316-4695-aabc-81fb46db6b81", "methods": [], "name": "test", "namespace": "9lfthysp", "project_id": "proj-37259d35-141f-42fb-bfce-6582a0085c22", "uri": "/api/test"}, {"archived": false, "code": "\n\nimport variables\nimport shared\nimport sms\nfrom fastapi.responses import JSONResponse\nfrom twilio.rest import Client\nfrom typing import Optional\nfrom pydantic import BaseModel\nfrom global_storage import storage_context\n\ndef get(greeting):\n  # sms.send(\"8185851298\", \"hello from brev sms\")\n  return { f\"{greeting} brev!\" }\n\n\n# type definition of incoming JSON body\nclass Sport(BaseModel):\n  sport1: str\n  team1: str\n  live: str\n  summary: str\n  culture: str\n\nclass User(BaseModel):\n  \"\"\"\n  Description\n  \"\"\"\n  name: Optional[str]\n  phone: Optional[str]\n  # email: Optional[str]\n  # sport: Optional[Sport] \n  class Config:\n    title = 'Main'\n\ndef post(user: User, user_store = storage_context(\"users\")):\n  user_store[user.phone] = user.dict()\n  client = Client(variables.ACCOUNT_SID, variables.TWILIO_AUTH_TOKEN)\n  # Send to everyone in users Collection.\n  # for user_id in user_store:\n  message = client.messages \\\n    .create(\n        body=\"Oh no! Looks like your carrier is rejecting some of our texts. Try to add us as a contact to help prevent this. \"\n        # body=\"March Madness continues on after a WILD ending of what is known as the \u2018Elite 8\u2019 last night. If you want to learn more about how March Madness works and understand the tournament you can watch this 3 minute video: https://youtu.be/BLDb8sK95PE \\n\\nHighlights from yesterday evening include: \\n\\n\ud83c\udfc0 #11 UCLA beating #1 University of Michigan by 2 points. People will most likely be talking about the \u201cair-ball\u201d at the end. You can say something like \u201cWell what about the layup right after?\u201d Here is context: https://youtu.be/0m18O---QyU \\n\\n\ud83c\udfc0 Also included in Women\u2019s NCAA, University of Connecticut going to the Final 4 AGAIN. They are the most dominant team in Women\u2019s basketball history with 11 Championships, including 4 championships in a row from \u201913 to \u201916, and hold the two longest winning streaks in NCAA (both men\u2019s and women\u2019s) history. \\n\\n\ud83c\udfc0 Finally, always remember that players are NOT allowed to accept any financial payments while playing for the NCAA under any circumstances while this tournament generates $1.1 Billion in revenue. Many argue that players are exploited for their likeliness and deserve a share of the money they generate! We\u2019ll save that for another time ;) \\n\\nWhat to know: The final four resumes this Saturday and the winners will advance to the championship. Pick a school, learn some players' names, and enjoy March Madness! \u26f9\ufe0f\u200d\u2640\ufe0f\u26f9\ufe0f\u200d\u2642\ufe0f \\n\\nReminder: March Madness is only for college basketball and not the NBA.\",\n        from='+14156872582',\n        # to=user_store[user_id][\"phone\"]\n        to=\"+1\"\n    )\n\n  # print(message.sid)\n  # sms.send(user.phone, \"Welcome to the boysclub.\")\n  # return {\n  #   \"status\": f\"{user.name} says hi!\"\n  # }\n  return JSONResponse(status_code=201, content={\"status\": f\"success.\"})\n\n\n", "create_date": "2021-01-04T21:27:22.693447+00:00", "id": "ep-4121faee-2f58-430d-81f4-5725517dc8e3", "methods": [], "name": "subscribers_all", "namespace": "9lfthysp", "project_id": "proj-37259d35-141f-42fb-bfce-6582a0085c22", "uri": "/api/subscribers_all"}, {"archived": false, "code": "\nimport variables\nimport shared\nimport sms\nfrom typing import Optional\nfrom pydantic import BaseModel\nfrom global_storage import storage_context\nfrom fastapi.responses import JSONResponse\nfrom twilio.rest import Client\n\n# def get(response):\n#   if response == \"\ud83d\udc4d\": # do we need all the shades?\n#     return { f\"positive feedback\" }\n#   elif response == \"\ud83d\udc4e\":\n#     return { f\"negative feedback\" }\n#   else:\n#     return { f\"response: {response}!\" }\n\n# type definition of incoming JSON body\nclass Sport(BaseModel):\n  sport1: str\n  team1: str\n  live: str\n  summary: str\n  culture: str\n\nclass User(BaseModel):\n  \"\"\"\n  Description\n  \"\"\"\n  name: str\n  phone: str\n  # email: Optional[str]\n  # sport: Optional[Sport] \n  class Config:\n    title = 'Main'\n\n# POST webhook on website\ndef post(user: User, user_store = storage_context(\"users\")):\n  phone_number = \"+1\" + str(user.phone) \n  user_store[phone_number] = user.dict()\n  client = Client(variables.ACCOUNT_SID, variables.TWILIO_AUTH_TOKEN)\n  message = client.messages \\\n    .create(\n        body=\"Welcome to the BOYS.CLUB, where you get the latest on all things that you\u2019d rather us cover for you. No more boys club talk that keeps you out of the conversation. \\n \ud83e\udd4a Here a few things you can expect from us: \\n \ud83c\udfc0 The latest buzz on all things pop culture for featured games, so you know what people are laughing about in your Tuesday morning meetings. \\n \ud83c\udfc8 Headlines, close games, and players to know about (yes this will include photos of Jimmy G \ud83d\udd25). \\n \u26bd\ufe0f Important upcoming dates, so you\u2019re never stuck asking if anyone has weekend plans on the Friday before the Super Bowl (ouch, we\u2019ve all been there). \\n \u26be\ufe0f Interactive engagement on your side (coming soon!), send us a \ud83d\udc4d or \ud83d\udc4e for a quick pulse check on how our updates are sitting with you, send us \u2018MORE\u2019 and if we\u2019ve got it, we\u2019ll send follow up articles or tweets for more info. Reply STOP to unsubscribe at anytime.\",\n        from_='+14153580188',\n        # status_callback='https://9lfthysp.brev.dev/api/signup_welcome',\n        to=user.phone\n      )\n\n  print(message.sid)\n  # sms.send(user.phone, \"Welcome to the boysclub.\")\n  # return {\n  #   \"status\": f\"{user.name} says hi!\"\n  # }\n  return JSONResponse(status_code=201, content={\"status\": f\"{user.name} success.\"})\n\n\n", "create_date": "2021-01-04T21:27:44.689712+00:00", "id": "ep-eb059bf2-d6ec-45c5-86af-05a3eab6f131", "methods": [], "name": "signup_welcome", "namespace": "9lfthysp", "project_id": "proj-37259d35-141f-42fb-bfce-6582a0085c22", "uri": "/api/signup_welcome"}, {"archived": false, "code": "import variables\nimport shared\nimport sms\nfrom pydantic import BaseModel\nfrom global_storage import storage_context\nfrom twilio.rest import Client\nimport datetime\nfrom fastapi.responses import JSONResponse\nfrom typing import Optional\nimport random\n\ndef add_value_to_responses_dict(dict_obj, key, value):\n    # Check if key exist in dict or not\n    if key in dict_obj:\n        # Key exist in dict.\n        # Check if type of value of key is list or not\n        if not isinstance(dict_obj[key], list):\n            # If type is not list then make it list\n            dict_obj[key] = [dict_obj[key]]\n        # Append the value in list\n        dict_obj[key].append(\"DATE/TIME: \" + str(datetime.datetime.now()) + \" BODY: \" + value)\n    else:\n        # As key is not in dict,\n        # so, add key-value pair and add them to Users dict\n        dict_obj[key] = str(datetime.datetime.now()) + value\n\ndef existing_user(dict_obj, key):\n  if key in dict_obj:\n    return True\n  else:\n    return False\n\ndef new_to_waitlist(dict_obj, key):\n  if key in dict_obj:\n    return False\n  else:\n    return True\n\ndef on_waitlist(dict_obj, key):\n  if key in dict_obj:\n    return True\n  else:\n    return False\n\ndef unsubcribe_user(dict_obj_waitlist, dict_obj_users, key):\n  if key in dict_obj_waitlist:\n    del dict_obj_waitlist[key]\n  if key in dict_obj_users:\n    del dict_obj_users[key]\n    \n\nclass IncomingText(BaseModel):\n  ToCountry: str\n  ToState: str\n  SmsMessageSid: str\n  NumMedia: str\n  ToCity: str\n  FromZip: str\n  SmsSid: str\n  FromState: str\n  SmsStatus: str\n  FromCity: str\n  Body: str\n  FromCountry: str\n  To: str\n  ToZip: str\n  NumSegments: str\n  MessageSid: str\n  AccountSid: str\n  From: str\n  ApiVersion: str\n\nclass User(BaseModel):\n  \"\"\"\n  Description\n  \"\"\"\n  name: Optional[str]\n  phone: Optional[str]\n  # email: Optional[str]\n  # sport: Optional[Sport] \n  class Config:\n    title = 'Main'\n\n# Hook for incoming texts\ndef get(ToCountry: str, ToState: str, SmsMessageSid: str, NumMedia: str, ToCity: str, FromZip: str, SmsSid: str, FromState: str, SmsStatus: str, FromCity: str, Body: str, FromCountry: str, To: str, ToZip: str, NumSegments: str, MessageSid: str, AccountSid: str, From: str, ApiVersion: str, incoming_texts_store = storage_context(\"incoming_texts\"), user_store = storage_context(\"users\"), waitlist_store = storage_context(\"waitlist\")):\n  # Log everything this user ever sends us.\n  add_value_to_responses_dict(incoming_texts_store, From, Body)\n  # Set up TWILIO variables.\n  client = Client(variables.ACCOUNT_SID, variables.TWILIO_AUTH_TOKEN)\n  # Are they on the waitlist still?\n  is_not_on_waitlist = new_to_waitlist(waitlist_store, From)\n  is_on_waitlist = on_waitlist(waitlist_store, From)\n  # Have we seen this user before in our Users table?\n  is_existing_user = existing_user(user_store, From)\n\n  # TODO: check if Body == \"STOP\" and delete them and send a confirmation\n  if (Body == 'STOP'):\n    unsubcribe_user(waitlist_store, user_store, From)\n    message = client.messages \\\n      .create(\n          body=\"You are now successfully unsubscribed. We appreciate your feedback as we are early on in launching this product, can you share your reason for leaving? After this text, you won't hear from us again but we would appreciate your feedback greatly! Thanks, xx.\",\n          from_='+14156872582',\n          # status_callback='https://9lfthysp.brev.dev/api/signup_welcome',\n          to=From\n        )\n    return \"unsubscribed\"\n  \n  waitlist_with_num = f\"Welcome to the boys.club waitlist! \ud83e\udd73\\n\\nWe\u2019re currently letting users in on a rolling basis and you are currently #{random.randint(29,41)} in line. \\n\\n\ud83e\udd14 Want to move up in line? \\n - Reply to this text with your name \\n - Let us know why you signed up \\n - Tag us on social @boysclubtext \\n\\n \ud83e\udd4a We\u2019ll get back to you soon & let you know when we\u2019re ready to have you join the boysclub. \\nReply STOP to unsubscribe at anytime.\"\n  # Was it a signup?\n  if is_existing_user:\n    message = client.messages \\\n      .create(\n          body=\"Your message has been received! Thanks for the feedback/info. As we are working on getting more responsive, if you want to get in touch with us, feel free to reach out to ella@boys.club or @boysclubtext on Twitter.\",\n          from_='+14156872582',\n          # status_callback='https://9lfthysp.brev.dev/api/sms',\n          to=From\n        )\n  elif is_not_on_waitlist:\n    # Sign up new user, for now with NoName.\n    waitlist_store[From] = \"NoName\"\n    # TODO: Send a real waitlist number\n    message = client.messages \\\n      .create(\n          body=waitlist_with_num,\n          from_='+14156872582',\n          # status_callback='https://9lfthysp.brev.dev/api/signup_welcome',\n          to=From\n        )\n  elif is_on_waitlist:\n    message = client.messages \\\n      .create(\n          body=\"Your message has been received! Thanks for the feedback/info. As we are working on getting more responsive, if you want to get in touch with us, feel free to reach out to ella@boys.club or @boysclubtext on Twitter.\",\n          from_='+14156872582',\n          # status_callback='https://9lfthysp.brev.dev/api/sms',\n          to=From\n        )\n  \n\n  return \"status: success.\"\n\n\n\n\ndef post(user: User, user_store = storage_context(\"users\")):\n  # TODO: this is a fallback method, so update similar logic\n  user_store[user.phone] = user.dict()\n  client = Client(variables.ACCOUNT_SID, variables.TWILIO_AUTH_TOKEN)\n  message = client.messages \\\n    .create(\n        body=\"Welcome to the BOYS.CLUB, where you get the latest on all things that you\u2019d rather us cover for you. No more boys club talk that keeps you out of the conversation. \\n \ud83e\udd4a Here a few things you can expect from us: \\n \ud83c\udfc0 The latest buzz on all things pop culture for featured games, so you know what people are laughing about in your Tuesday morning meetings. \\n \ud83c\udfc8 Headlines, close games, and players to know about (yes this will include photos of Jimmy G \ud83d\udd25). \\n \u26bd\ufe0f Important upcoming dates, so you\u2019re never stuck asking if anyone has weekend plans on the Friday before the Super Bowl (ouch, we\u2019ve all been there). \\n \u26be\ufe0f Interactive engagement on your side, send us a \ud83d\udc4d or \ud83d\udc4e for a quick pulse check on how our updates are sitting with you, send us \u2018MORE\u2019 and if we\u2019ve got it, we\u2019ll send follow up articles or tweets for more info, and of course \u2018STOP\u2019 at any time to end your boys.club membership.\",\n        from_='+14156872582',\n        status_callback='https://9lfthysp.brev.dev/api/signup_welcome',\n        to=user.phone\n      )\n\n  # print(message.sid)\n  return JSONResponse(status_code=201, content={\"status\": f\"{user.name} success.\"})", "create_date": "2021-01-08T01:15:29.307139+00:00", "id": "ep-d7cacdfe-f06b-4984-a209-fd81ba8eefcc", "methods": [], "name": "incoming_sms", "namespace": "9lfthysp", "project_id": "proj-37259d35-141f-42fb-bfce-6582a0085c22", "uri": "/api/incoming_sms"}, {"archived": false, "code": "\nimport variables\nimport shared\nimport sms\nfrom typing import Optional\nfrom pydantic import BaseModel\nfrom global_storage import storage_context\nfrom fastapi.responses import JSONResponse\nfrom twilio.rest import Client\n\n# type definition of incoming JSON body\nclass Sport(BaseModel):\n  sport1: str\n  team1: str\n  live: str\n  summary: str\n  culture: str\n\nclass User(BaseModel):\n  \"\"\"\n  Description\n  \"\"\"\n  name: Optional[str]\n  phone: str\n  # email: Optional[str]\n  # sport: Optional[Sport] \n  class Config:\n    title = 'Main'\n\ndef take_off_waitlist(dict_obj_waitlist, key):\n  if key in dict_obj_waitlist:\n    del dict_obj_waitlist[key]\n\n# Run this POST to manually move users off the waitlist\ndef post(user: User, user_store = storage_context(\"users\"), waitlist_store = storage_context(\"waitlist\")):\n  # phone_number = \"+1\" + str(user.phone) \n  take_off_waitlist(waitlist_store, user.phone)\n  user_store[user.phone] = user.dict()\n  # TODO remove from waitlist\n  client = Client(variables.ACCOUNT_SID, variables.TWILIO_AUTH_TOKEN)\n  message = client.messages \\\n    .create(\n        body=\"Congrats, you are off the waitlist! \\nWelcome to the BOYS.CLUB, where you get the latest on all things that you\u2019d rather us cover for you. No more boys club talk that keeps you out of the conversation. \\n\\n \ud83e\udd4a Here a few things you can expect from us: \\n \ud83c\udfc0 The latest buzz on all things pop culture for featured games, so you know what people are laughing about in your Tuesday morning meetings. \\n \ud83c\udfc8 Headlines, close games, and players to know about (yes this will include photos of Jimmy G \ud83d\udd25). \\n \u26bd\ufe0f Important upcoming dates, so you\u2019re never stuck asking if anyone has weekend plans on the Friday before the Super Bowl (ouch, we\u2019ve all been there). \\n \u26be\ufe0f Interactive engagement on your side (coming soon!), send us a \ud83d\udc4d or \ud83d\udc4e for a quick pulse check on how our updates are sitting with you, send us \u2018MORE\u2019 and if we\u2019ve got it, we\u2019ll send follow up articles or tweets for more info. \\nReply STOP to unsubscribe at anytime.\",\n        from_='+14156872582',\n        # status_callback='https://9lfthysp.brev.dev/api/signup_welcome',\n        to=user.phone\n      )\n\n  print(message.sid)\n  # sms.send(user.phone, \"Welcome to the boysclub.\")\n  # return {\n  #   \"status\": f\"{user.name} says hi!\"\n  # }\n  return JSONResponse(status_code=201, content={\"status\": f\"{user.name} success.\"})", "create_date": "2021-01-20T22:48:27.139279+00:00", "id": "ep-96889c44-abde-48b7-b322-9ea747e9c957", "methods": [], "name": "waitlist_to_user", "namespace": "9lfthysp", "project_id": "proj-37259d35-141f-42fb-bfce-6582a0085c22", "uri": "/api/waitlist_to_user"}, {"archived": false, "code": "\nimport variables\nimport shared\nfrom global_storage import storage_context\nfrom pydantic import BaseModel\nimport json\n\ndef get(user_store = storage_context(\"users\"), waitlist_store = storage_context(\"waitlist\")):\n  return {json.dumps({ k:v for k,v in user_store.items()}, indent=4)}\n\ndef post(user_store = storage_context(\"users\")):\n  return {user_store.items()}\n", "create_date": "2021-03-31T19:18:41.289339+00:00", "id": "ep-c615f9bf-2726-4414-b55b-4c06b8068da9", "methods": [], "name": "db_dump", "namespace": "9lfthysp", "project_id": "proj-37259d35-141f-42fb-bfce-6582a0085c22", "uri": "/api/db_dump"}, {"archived": false, "code": "\nimport variables\nimport shared\nfrom global_storage import storage_context\nfrom pydantic import BaseModel\n\nfrom pydantic import BaseModel\nfrom typing import Optional\n\nclass User(BaseModel):\n  \"\"\"\n  Description\n  \"\"\"\n  name: Optional[str]\n  phone: str\n  # email: Optional[str]\n  # sport: Optional[Sport] \n  class Config:\n    title = 'Main'\n\ndef post(user: User, user_store = storage_context(\"users\")):\n  user_store[user.phone] = user.dict()\n  return", "create_date": "2021-03-31T19:44:19.262759+00:00", "id": "ep-e67efbcd-1463-4210-8a11-f74b6dcbd7c0", "methods": [], "name": "manual_add_user", "namespace": "9lfthysp", "project_id": "proj-37259d35-141f-42fb-bfce-6582a0085c22", "uri": "/api/manual_add_user"}]